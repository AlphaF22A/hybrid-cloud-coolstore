apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  creationTimestamp: null
  labels:
    app: datagrid-service
    app.kubernetes.io/component: datagrid-service
    app.kubernetes.io/instance: datagrid-service
  name: datagrid-service
spec:
  lookupPolicy:
    local: false
  tags:
  - annotations:
      openshift.io/imported-from: quay.io/openshiftlabs/ccn-infinispan:12.0.0.Final-1
    from:
      kind: DockerImage
      name: quay.io/openshiftlabs/ccn-infinispan:12.0.0.Final-1
    generation: null
    importPolicy: {}
    name: 12.0.0.Final-1
    referencePolicy:
      type: ""
status:
  dockerImageRepository: ""
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  creationTimestamp: null
  labels:
    app: datagrid-service
    app.kubernetes.io/component: datagrid-service
    app.kubernetes.io/instance: datagrid-service
    app.kubernetes.io/part-of: cart
    app.openshift.io/runtime: datagrid
  name: datagrid-service
spec:
  replicas: 1
  selector:
    deploymentconfig: datagrid-service
  strategy:
    resources: {}
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        deploymentconfig: datagrid-service
    spec:
      containers:
      - env:
        - name: PASS
          value: pass
        - name: USER
          value: user
        image: quay.io/openshiftlabs/ccn-infinispan:12.0.0.Final-1
        name: datagrid-service
        ports:
        - containerPort: 2157
          protocol: TCP
        - containerPort: 46655
          protocol: TCP
        - containerPort: 57600
          protocol: TCP
        - containerPort: 7800
          protocol: TCP
        - containerPort: 7900
          protocol: TCP
        - containerPort: 11221
          protocol: TCP
        - containerPort: 11222
          protocol: TCP
        resources: {}
  test: false
  triggers:
  - type: ConfigChange
  - imageChangeParams:
      automatic: true
      containerNames:
      - datagrid-service
      from:
        kind: ImageStreamTag
        name: datagrid-service:12.0.0.Final-1
    type: ImageChange
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  creationTimestamp: null
  labels:
    app: datagrid-service
    app.kubernetes.io/component: datagrid-service
    app.kubernetes.io/instance: datagrid-service
  name: datagrid-service
spec:
  ports:
  - name: 2157-tcp
    port: 2157
    protocol: TCP
    targetPort: 2157
  - name: 7800-tcp
    port: 7800
    protocol: TCP
    targetPort: 7800
  - name: 7900-tcp
    port: 7900
    protocol: TCP
    targetPort: 7900
  - name: 11221-tcp
    port: 11221
    protocol: TCP
    targetPort: 11221
  - name: 11222-tcp
    port: 11222
    protocol: TCP
    targetPort: 11222
  - name: 46655-tcp
    port: 46655
    protocol: TCP
    targetPort: 46655
  - name: 57600-tcp
    port: 57600
    protocol: TCP
    targetPort: 57600
  selector:
    deploymentconfig: datagrid-service
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: cart
    app.kubernetes.io/version: 1.0-SNAPSHOT
    app.openshift.io/runtime: quarkus
  name: cart-artifact-image
spec:
  lookupPolicy:
    local: false
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: cart
    app.kubernetes.io/version: 1.0-SNAPSHOT
    app.openshift.io/runtime: quarkus
  name: cart-artifact-build
spec:
  output:
    to:
      kind: ImageStreamTag
      name: cart-artifact-image:1.0-SNAPSHOT
  postCommit: {}
  resources: {}
  source:
    contextDir: m4/cart-service
    git:
      uri: https://github.com/rhsgsa/cloud-native-workshop-v2-labs-solutions.git
      ref: ocp-4.10
    type: Git
  strategy:
    type: Source
    sourceStrategy:
      env:
      #- name: MAVEN_MIRROR_URL
      #  value: http://nexus:8081/repository/maven-all-public/
      - name: MAVEN_ARGS
        value: "compile package -DskipTests -Dquarkus.kubernetes.deploy=false"
      - name: ARTIFACT_COPY_ARGS
        value: "-r quarkus-app/"
      from:
        kind: ImageStreamTag
        name: ubi8-openjdk-11:1.10
        namespace: openshift
  triggers:
  - type: ConfigChange
  - type: ImageChange
    imageChange: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: cart
    app.kubernetes.io/version: 1.0-SNAPSHOT
    app.openshift.io/runtime: quarkus
  name: cart
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app.kubernetes.io/name: cart
    app.kubernetes.io/version: 1.0-SNAPSHOT
  type: ClusterIP
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app.kubernetes.io/version: 1.0-SNAPSHOT
    app.kubernetes.io/name: cart
    app.openshift.io/runtime: quarkus
  name: cart
spec: {}
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: openjdk-11
spec:
  dockerImageRepository: registry.access.redhat.com/ubi8/openjdk-11
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    app.kubernetes.io/version: 1.0-SNAPSHOT
    app.kubernetes.io/name: cart
    app.openshift.io/runtime: quarkus
  name: cart
spec:
  output:
    to:
      kind: ImageStreamTag
      name: cart:1.0-SNAPSHOT
  source:
    dockerfile: "####\n# This Dockerfile is used in order to build a container that\
      \ runs the Quarkus application in JVM mode\n#\n# Before building the container\
      \ image run:\n#\n# ./mvnw package\n#\n# Then, build the image with:\n#\n# docker\
      \ build -f src/main/docker/Dockerfile.jvm -t quarkus/code-with-quarkus-jvm .\n\
      #\n# Then run the container using:\n#\n# docker run -i --rm -p 8080:8080 quarkus/code-with-quarkus-jvm\n\
      #\n# If you want to include the debug port into your docker image\n# you will\
      \ have to expose the debug port (default 5005) like this :  EXPOSE 8080 5005\n\
      #\n# Then run the container using :\n#\n# docker run -i --rm -p 8080:8080 -p\
      \ 5005:5005 -e JAVA_ENABLE_DEBUG=\"true\" quarkus/code-with-quarkus-jvm\n#\n\
      ###\nFROM registry.access.redhat.com/ubi8/ubi-minimal:8.4 \n\nARG JAVA_PACKAGE=java-11-openjdk-headless\n\
      ARG RUN_JAVA_VERSION=1.3.8\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'\n# Install\
      \ java and the run-java script\n# Also set up permissions for user `1001`\n\
      RUN microdnf install curl ca-certificates ${JAVA_PACKAGE} \\\n    && microdnf\
      \ update \\\n    && microdnf clean all \\\n    && mkdir /deployments \\\n  \
      \  && chown 1001 /deployments \\\n    && chmod \"g+rwX\" /deployments \\\n \
      \   && chown 1001:root /deployments \\\n    && curl https://repo1.maven.org/maven2/io/fabric8/run-java-sh/${RUN_JAVA_VERSION}/run-java-sh-${RUN_JAVA_VERSION}-sh.sh\
      \ -o /deployments/run-java.sh \\\n    && chown 1001 /deployments/run-java.sh\
      \ \\\n    && chmod 540 /deployments/run-java.sh \\\n    && echo \"securerandom.source=file:/dev/urandom\"\
      \ >> /etc/alternatives/jre/conf/security/java.security\n\n# Configure the JAVA_OPTIONS,\
      \ you can add -XshowSettings:vm to also display the heap size.\nENV JAVA_OPTIONS=\"\
      -Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager\"\
      \n# We make four distinct layers so if there are application changes the library\
      \ layers can be re-used\nCOPY --chown=1001 target/quarkus-app/lib/ /deployments/lib/\n\
      COPY --chown=1001 target/quarkus-app/*.jar /deployments/\nCOPY --chown=1001\
      \ target/quarkus-app/app/ /deployments/app/\nCOPY --chown=1001 target/quarkus-app/quarkus/\
      \ /deployments/quarkus/\n\nEXPOSE 8080\nUSER 1001\n\nENTRYPOINT [ \"/deployments/run-java.sh\"\
      \ ]\n\n"
    images:
    - from:
        kind: ImageStreamTag
        name: cart-artifact-image:1.0-SNAPSHOT
      paths:
      - sourcePath: "/deployments/."
        destinationDir: "./target/"
  strategy:
    dockerStrategy: {}
  triggers:
  - type: ImageChange
    imageChange:
      from:
        kind: ImageStreamTag
        name: cart-artifact-image:1.0-SNAPSHOT
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    app.openshift.io/connects-to: my-cluster,datagrid-service
  labels:
    app.kubernetes.io/version: 1.0-SNAPSHOT
    app.kubernetes.io/name: cart
    app.openshift.io/runtime: quarkus
    app.kubernetes.io/part-of: cart
  name: cart
spec:
  replicas: 1
  selector:
    app.kubernetes.io/name: cart
    app.kubernetes.io/version: 1.0-SNAPSHOT
  template:
    metadata:
      labels:
        app.kubernetes.io/version: 1.0-SNAPSHOT
        app.kubernetes.io/name: cart
        app.openshift.io/runtime: quarkus
    spec:
      containers:
        - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: ""
          imagePullPolicy: IfNotPresent
          name: cart
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - cart
        from:
          kind: ImageStreamTag
          name: cart:1.0-SNAPSHOT
      type: ImageChange
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app.kubernetes.io/name: cart
    app.kubernetes.io/version: 1.0-SNAPSHOT
    app.openshift.io/runtime: quarkus
  name: cart
spec:
  port:
    targetPort: 8080
  to:
    kind: Service
    name: cart
---
