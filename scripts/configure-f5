#!/bin/bash 

[ $# -eq 0 ] && echo "Usage: `basename $0` <hcd config yaml file>" && exit 1

[ "$1" = "--clean" ] && CLEAN_FIRST=1 && shift
HCD_CONF=$1

# Check yq, jinja2 and vesctl are installed 
if ! which yq > /dev/null; then
	echo "Please install 'yq' using the following!"
	echo "sudo curl --location --silent --show-error https://github.com/mikefarah/yq/releases/download/v4.33.3/yq_linux_amd64 -o /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq"
	echo "or brew install yq"
	echo "Be sure the yq --version is version v4.33.3"
	exit 1
fi

if ! which jinja2 > /dev/null; then
	echo "Please install 'jinja2'!"
	echo "sudo pip install jinja2-cli"
	exit 1
fi

if ! which vesctl > /dev/null; then
	echo "Please install 'vesctl'!"
	echo "Install and configure the CLI: https://gitlab.com/volterra.io/vesctl/blob/main/README.md"
	echo "If using Linux, disable SELinux with 'sudo setenforce 0'"
	exit 1
fi

##################################

BG_CNT=0                     # Used for running api requests concurrently 
BG_MAX=3
TMP=/tmp/.f5.tmp
rm -rf $TMP && mkdir $TMP
OUT=/tmp/out
rm -rf $OUT && mkdir $OUT
LOG=/tmp/.f5.log
rm -f $LOG

wait_pod_exists()
{
	while ! oc --context=$CONTEXT get pod $* --no-headers 2>/dev/null >&2
	do
		sleep 1
	done
}

wait_all_pods_ready()
{
	while ! oc --context=$CONTEXT get pod $* --no-headers 2>/dev/null  | awk '{print $2}' | awk -F/ '{if ($1 != $2) exit 1}'
	do
		sleep 1
	done
}

# Fetch global config 

BASE_DOMAIN=$(cat $HCD_CONF | yq .hcd.domain)
BASE_DOMAIN_READABLE=$(echo $BASE_DOMAIN | tr "." "-")
TOKEN=$(cat $HCD_CONF | yq .hcd.token)
F5_NAMESPACE=$(cat $HCD_CONF | yq .hcd.namespace)

# Fetch list of cluster contexts from config

CLUSTER_CONTEXTS=`cat $HCD_CONF | yq .sites.*.context`
> $TMP/.contexts

mkdir -p f5/cleanup
CLEANUP_SITES=f5/cleanup/cleanup-sites-$BASE_DOMAIN_READABLE.sh
CLEANUP_F5XC=f5/cleanup/cleanup-f5xc-$BASE_DOMAIN_READABLE.sh
[ -f $CLEANUP_SITES ] && mv $CLEANUP_SITES $CLEANUP_SITES.prev
[ -f $CLEANUP_F5XC ]  && mv $CLEANUP_F5XC  $CLEANUP_F5XC.prev
echo 'wait' >> $CLEANUP_F5XC
echo 'wait' >> $CLEANUP_SITES

###############################################################
echo Checking OCP contexts are configured and unique ...

for context in $CLUSTER_CONTEXTS
do
	echo -n "$context: "

	SVR=`oc --context=$context whoami --show-server` || exit 1
	echo "Server URL: $SVR"
	grep $SVR $TMP/.contexts && echo "Context $context points to the same cluster.  Context overlap!" && exit 1
	echo $SVR >> $TMP/.contexts
done

getContext()
{
	# Fetch the required OCP kube context for a site ($1)
	echo $(cat $HCD_CONF | yq .sites.$1.context) 
}

# Fetch list of site names from config file
SITE_LIST=$(cat $HCD_CONF | yq '.sites[] | key')

if [ "$CLEAN_FIRST" ]; then
	for site in $SITE_LIST
	do
		CONTEXT=$(getContext $site) || exit 1

		site_name=site-$site-$BASE_DOMAIN_READABLE
		conffile=$OUT/$site_name.yaml

		echo $CONTEXT: Cleaning F5 Ingress on context $CONTEXT ...
		# Create the F5 Ingress (VES) in OpenShift
		cat $HCD_CONF | yq ".sites.$site" | jinja2 yaml/f5/site.yaml -Dsite=$site -Dtoken=$TOKEN -Ddomain_readable=$BASE_DOMAIN_READABLE > $conffile

		[ "$CLEAN_FIRST" ] && oc --context=$CONTEXT delete -f $conffile -n ves-system >>$LOG 2>&1 &
	done
	wait
fi
	

###############################################################
# Set up the F5 Ingress (VER) on each site/cluster. 

for site in $SITE_LIST
do
	CONTEXT=$(getContext $site) || exit 1

	echo $CONTEXT: Launching F5 Ingress for site [$site-$BASE_DOMAIN_READABLE] ...

	site_name=site-$site-$BASE_DOMAIN_READABLE
	conffile=$OUT/$site_name.yaml

	# Create the F5 Ingress (VES) in OpenShift
	cat $HCD_CONF | yq ".sites.$site" | jinja2 yaml/f5/site.yaml -Dsite=$site -Dtoken=$TOKEN -Ddomain_readable=$BASE_DOMAIN_READABLE > $conffile

	##[ "$CLEAN_FIRST" ] && oc --context=$CONTEXT delete -f $conffile -n ves-system >>$LOG 2>&1
	oc --context=$CONTEXT create -f $conffile -n ves-system >>$LOG 2>&1

	echo "oc --context=$CONTEXT delete -f $conffile &" >> $CLEANUP_SITES 
done

###############################################################
# Remove any existing, non-pending site registrations

echo "{}" > $TMP/.empty.request.yaml  

vcmd="vesctl --timeout 10"

for site in $SITE_LIST
do
	site_name=$site-$BASE_DOMAIN_READABLE

	# Fetch any existing site registration request with the same name
	r=
	$vcmd request rpc registration.CustomAPI.ListRegistrationsBySite -i $TMP/.empty.request.yaml \
		--uri /public/namespaces/system/registrations_by_site/$site_name --http-method GET > $TMP/.reg-$site_name.yaml 

	r=`cat $TMP/.reg-$site_name.yaml | yq .items[0].name`
	[ "$r" = "null" ] && r=

	if [ "$r" ] 
	then
		[ "$CLEAN_FIRST" ] && $vcmd configuration delete registration $r -n system

		# Fetch status of site registration request 
		s=`cat $TMP/.reg-$site_name.yaml | yq .items[0].object.status.currentState`

		echo -n $site_name: found existing registration [$r] for site [$site_name] with status [$s] ...

		if [ "$s" != "PENDING" -a "$s" != "ONLINE" ]; then
			echo -n ... removing ...
	
			$vcmd configuration delete registration $r -n system

		fi
		echo ok
	fi
done

###############################################################
# Wait for F5 Ingress to come up on all sites 

for site in $SITE_LIST
do
	export CONTEXT=$(getContext $site) || exit 1

	echo -n "$CONTEXT: Waiting for vp-manager-0 pod to be ready in namespace ves-system ... "
	#wait_all_pods_ready -n ves-system 
	#CONTEXT=$(getContext $site) wait_all_pods_ready -n ves-system 
	wait_all_pods_ready vp-manager-0 -n ves-system 
	echo ok
done

###############################################################
# Approve the pending site registrations
# Docs on the below API call:
# https://f5-asean.console.ves.volterra.io/web/devportal/apidocs/registration 
# https://docs.cloud.f5.com/docs/reference/api-ref/ves-io-schema-registration-customapi-registrationapprove 

for site in $SITE_LIST
do
	site_name=$site-$BASE_DOMAIN_READABLE

	echo -n $site_name: Waiting for pending registration for site [$site_name] ...
	r=
	s=
	cnt=0
	#while [ ! "$r" -a ! "$s" ]
	while [ ! "$r" -o "$s" != "PENDING" ]
	do
		$vcmd request rpc registration.CustomAPI.ListRegistrationsBySite -i $TMP/.empty.request.yaml \
			--uri /public/namespaces/system/registrations_by_site/$site_name --http-method GET > $TMP/.site-$site_name.yaml

		# Fetch request name and status
		r=`cat $TMP/.site-$site_name.yaml | yq .items[0].name`
		s=`cat $TMP/.site-$site_name.yaml | yq .items[0].object.status.currentState` 
		[ "$r" = "null" ] && r=
		[ "$s" = "null" ] && s=

		[ "$s" = "ONLINE" ] && break 

		echo -n .

		let cnt=$cnt+1
		[ $cnt -gt 20 ] && echo -e "\nSite registration not found on F5 side.\nAre all pods running & 'ready' in all 'ves-system' namespaces on all clusters?\nIs your F5 XC API token valid?\nCheck the vp-manager-0 pod logs\nDo you see error 'Registration failed'?\nAlso see the f5/README.md" && exit 1

		sleep 3
	done

	echo "$vcmd configuration delete registration $r -n system &" >> $CLEANUP_SITES

	if [ "$s" = "PENDING" ]; then
		echo ok, pending registration found [$r] 

		conffile=$OUT/request-template-$site_name.yaml

		cat $TMP/.site-$site_name.yaml | jinja2 yaml/f5/approve-registration.yaml > $conffile

		echo -n "Approving registration [$r] for site [$site_name] ... "

		$vcmd request rpc registration.CustomAPI.RegistrationApprove -i $conffile \
			--uri /public/namespaces/system/registration/$r/approve --http-method POST >>$LOG  || exit 1
		echo "approved"
	else
		echo "none pending, status is [$s]"
	fi
done

#####
# Wait for registration to be "ONLINE" 

for site in $SITE_LIST
do
	site_name=$site-$BASE_DOMAIN_READABLE

	echo -n $site_name: Waiting for online registration for site [$site_name] ...
	r=
	s=
	until [ "$r" -a "$s" = "ONLINE" ]
	do
		$vcmd request rpc registration.CustomAPI.ListRegistrationsBySite -i $TMP/.empty.request.yaml \
			--uri /public/namespaces/system/registrations_by_site/$site_name --http-method GET > $TMP/.site-$site_name.yaml
		r=`cat $TMP/.site-$site_name.yaml | yq .items[0].name`
		s=`cat $TMP/.site-$site_name.yaml | yq .items[0].object.status.currentState` 
		[ "$r" = "null" ] && r=
		[ "$s" = "null" ] && s=

		echo -n .

		sleep 3
	done
	echo ok
done
#####

# Wait for F5 Ingress to come up fully ...

# FIXME for site in $SITE_LIST
# FIXME do
# FIXME 	export CONTEXT=$(getContext $site) || exit 1
# FIXME 
# FIXME 	echo -n "$CONTEXT: Waiting for the ver-0 pod to start in ves-system namespace on context $CONTEXT ... "
# FIXME 	wait_pod_exists ver-0 -n ves-system
# FIXME 	echo ok
# FIXME 
# FIXME done

# FIXME for site in $SITE_LIST
# FIXME do
# FIXME 	export CONTEXT=$(getContext $site) || exit 1
# FIXME 
# FIXME 	echo -n "$CONTEXT: Waiting for all pods to be ready in ves-system namespace on context $CONTEXT ... "
# FIXME 	wait_all_pods_ready -n ves-system 
# FIXME 	echo ok
# FIXME done

sleep 1

# Check the sites are available 
for site in $SITE_LIST
do
	echo -n "Checking if site [$site-$BASE_DOMAIN_READABLE] is available ... "
	if ! $vcmd configuration get site $site-$BASE_DOMAIN_READABLE -n system >/dev/null
	then
		echo 
		echo "Site [$site-$BASE_DOMAIN_READABLE] not yet available.  Be sure all pods in the project 'ver-system' are running/ready and run this script again."
		exit 1
	fi
	echo ok
done


########################################
# Now, create the http load balancers ...
########################################

echo Creating basic health check config [healthcheck] ...
cp yaml/f5/health.yaml $OUT

##[ "$CLEAN_FIRST" ] && $vcmd configuration delete healthcheck basic-healthcheck -n multi-cloud-openshift

$vcmd configuration create healthcheck -i $OUT/health.yaml >>$LOG 2>&1|| \
	$vcmd configuration replace healthcheck -i $OUT/health.yaml >>$LOG || exit 1
echo "$vcmd configuration delete healthcheck basic-healthcheck -n multi-cloud-openshift &" >> $CLEANUP_F5XC


INGRESS_LIST=$(cat $HCD_CONF  | yq '.ingresses[] | key')

# Create the Origin Pools, one for each ingress
for ingress in $INGRESS_LIST
do
	op_name=op-$ingress-$BASE_DOMAIN_READABLE
	conffile=$OUT/$op_name.yaml

	echo Creating Origin Pool [$op_name] ...

	cat $HCD_CONF | jinja2 yaml/f5/op.yaml -Dingress=$ingress -Ddomain_readable=$BASE_DOMAIN_READABLE > $conffile || exit 1

	(

	##[ "$CLEAN_FIRST" ] && $vcmd configuration delete origin_pool $op_name -n multi-cloud-openshift 

	$vcmd configuration create origin_pool -i $conffile >>$LOG 2>&1 || \
		$vcmd configuration replace origin_pool -i $conffile >>$LOG || exit 1

	echo "$vcmd configuration delete origin_pool $op_name -n multi-cloud-openshift &" >> $CLEANUP_F5XC
	) & 

	let BG_CNT=$BG_CNT+1
	if [ $BG_CNT -ge $BG_MAX ]; then wait; BG_CNT=0; fi
done


# Create the http load balancers, one for each ingress 
for ingress in $INGRESS_LIST
do
	lb_name=lb-$ingress-$BASE_DOMAIN_READABLE
	conffile=$OUT/$lb_name.yaml

	echo Creating HTTP Loadbalancer [$lb_name] ...

	cat $HCD_CONF | yq ".ingresses.$ingress" | jinja2 yaml/f5/lb.yaml -Dingress=$ingress -Ddomain=$BASE_DOMAIN -Ddomain_readable=$BASE_DOMAIN_READABLE > $conffile

	(

	##[ "$CLEAN_FIRST" ] && $vcmd configuration delete http_loadbalancer $lb_name -n multi-cloud-openshift

	$vcmd configuration create http_loadbalancer -i $conffile >>$LOG 2>&1 || \
		$vcmd configuration replace http_loadbalancer -i $conffile >>$LOG || exit 1
	echo "$vcmd configuration delete http_loadbalancer $lb_name -n multi-cloud-openshift &" >> $CLEANUP_F5XC
	) &

	let BG_CNT=$BG_CNT+1
	if [ $BG_CNT -ge $BG_MAX ]; then wait; BG_CNT=0; fi
done

wait

echo
echo All done.  Please wait 2-3 mins for all sites to become available!

echo All applied F5 configurations can be found in the $OUT directory for reference. 

echo 'set -x' >> $CLEANUP_F5XC
echo 'set -x' >> $CLEANUP_SITES

tac $CLEANUP_F5XC  > /tmp/tt && mv /tmp/tt $CLEANUP_F5XC;   chmod 700 $CLEANUP_F5XC
tac $CLEANUP_SITES > /tmp/tt && mv /tmp/tt $CLEANUP_SITES;  chmod 700 $CLEANUP_SITES

echo 
echo "To clean up configurations, run one of the following commands:"
echo 
echo "Clean up all F5 Ingress pods in ves-system: "
echo " $CLEANUP_F5XC"
echo 
echo "Clean up only the load balancers and pools:"
echo " $CLEANUP_SITES "
echo 

