#!/bin/bash

AWS_CREDS_SECRET_NAME=aws
AWS_CREDS_NS=open-cluster-management
TMPDIR=/tmp/setupletsencrypt

cd `dirname $0`
BASE=`pwd`
cd - >> /dev/null

source ${BASE}/../config.sh
source ${BASE}/generate-kubeconfigs

generate_kubeconfigs $TMPDIR


function git_clone_acme {
  local gitcheckoutdir=$1  

  rm -rf  $gitcheckoutdir/acme.sh
  git clone https://github.com/acmesh-official/acme.sh.git $gitcheckoutdir/acme.sh
}


function check_aws_cred {
  [[ -z "$AWS_ACCESS_KEY_ID" ]] && { echo "Error: AWS_ACCESS_KEY_ID not found in secret/${AWS_CREDS_SECRET_NAME} in the ${AWS_CREDS_NS} namespace"; exit 1; }
  [[ -z "$AWS_SECRET_ACCESS_KEY" ]] && { echo "Error: AWS_SECRET_ACCESS_KEY not found in secret/${AWS_CREDS_SECRET_NAME} in the ${AWS_CREDS_NS} namespace"; exit 1; }
}


function gen_apply_cert {
  local clustername="$1"
  local gitcheckoutdir=$2
  local certdir=$gitcheckoutdir/$clustername

  echo "generating certificate for ${clustername}..."
  cmd="oc --insecure-skip-tls-verify --kubeconfig=${TMPDIR}/${clustername}"

  mkdir -p $certdir

  export LE_API=$($cmd whoami --show-server | cut -f 2 -d ':' | cut -f 3 -d '/' | sed 's/-api././')
  export LE_WILDCARD=$($cmd get ingresscontroller default -n openshift-ingress-operator -o jsonpath='{.status.domain}')

  $gitcheckoutdir/acme.sh/acme.sh --issue -d "${LE_API}" -d "*.${LE_WILDCARD}" --dns dns_aws --server letsencrypt --force 

  $gitcheckoutdir/acme.sh/acme.sh --install-cert -d "${LE_API}" -d "*.${LE_WILDCARD}" --cert-file ${certdir}/cert.pem --key-file ${certdir}/key.pem --fullchain-file ${certdir}/fullchain.pem --ca-file ${certdir}/ca.cer

  $cmd create secret tls router-certs --cert=${certdir}/fullchain.pem --key=${certdir}/key.pem -n openshift-ingress
  $cmd patch ingresscontroller default -n openshift-ingress-operator --type=merge --patch='{"spec": { "defaultCertificate": { "name": "router-certs" }}}'

  $cmd create secret tls api-certs --cert=${certdir}/fullchain.pem --key=${certdir}/key.pem -n openshift-config
  $cmd patch apiserver cluster --type merge --patch="{\"spec\": {\"servingCerts\": {\"namedCertificates\": [ { \"names\": [  \"$LE_API\"  ], \"servingCertificate\": {\"name\": \"api-certs\" }}]}}}"
}


export AWS_ACCESS_KEY_ID="$(oc get -n $AWS_CREDS_NS secret/${AWS_CREDS_SECRET_NAME} -o jsonpath='{.data.aws_access_key_id}' | base64 -d)"
export AWS_SECRET_ACCESS_KEY="$(oc get -n $AWS_CREDS_NS secret/${AWS_CREDS_SECRET_NAME} -o jsonpath='{.data.aws_secret_access_key}' | base64 -d)"

check_aws_cred;

set -e

gitcheckoutdir=/tmp/coolstore-cert

rm -rf $gitcheckoutdir
mkdir -p $gitcheckoutdir

git_clone_acme $gitcheckoutdir

for clustername in ${CLUSTER_NAMES[@]}; do
  gen_apply_cert $clustername $gitcheckoutdir
done

rm -rf $TMPDIR
rm -rf $gitcheckoutdir
