#!/bin/bash

TMPDIR=/tmp/createsinglecluster

cd `dirname $0`
BASE=`pwd`
cd - >> /dev/null

source ${BASE}/../config.sh

if [ $# -lt 1 ]; then
  echo "usage: $0 CLUSTER_INDEX"
  exit 1
fi

cluster_index=$1

function ensure_set {
	local varName="$1"
	if [ -z "${!varName}" ]; then
		echo "$varName is not set"
		exit 1
	fi
}

function create_aws_creds_secret {
  local clustername="$1"

  if [ -z "$clustername" ]; then
    echo "create_aws_creds_secret called without clustername"
    exit 1
  fi

  local aws_access_key_id="$(oc get -n open-cluster-management secret/${AWS_SECRET_NAME} -o jsonpath='{.data.aws_access_key_id}' | base64 -d)"
  local aws_secret_access_key="$(oc get -n open-cluster-management secret/${AWS_SECRET_NAME} -o jsonpath='{.data.aws_secret_access_key}' | base64 -d)"

  ensure_set aws_access_key_id
  ensure_set aws_secret_access_key

  oc create secret generic ${clustername}-${AWS_SECRET_NAME}-creds \
    -n $clustername \
    --from-literal=aws_access_key_id="$aws_access_key_id" \
    --from-literal=aws_secret_access_key="$aws_secret_access_key"

  oc label secret/${clustername}-${AWS_SECRET_NAME}-creds \
    -n $clustername \
    cluster.open-cluster-management.io/backup="cluster" \
    cluster.open-cluster-management.io/copiedFromNamespace="open-cluster-management" \
    cluster.open-cluster-management.io/copiedFromSecretName="$AWS_SECRET_NAME"
}

function create_install_config_secret {
  local clustername="$1"
  if [ -z "$clustername" ]; then
    echo "create_install_config_secret called without clustername"
    exit 1
  fi

  local region="$2"
  if [ -z "$region" ]; then
    echo "create_install_config_secret called without region"
    exit 1
  fi

  local clusternetwork="$3"
  if [ -z "$clusternetwork" ]; then
    echo "create_install_config_secret called without clusternetwork"
    exit 1
  fi

  local servicenetwork="$4"
  if [ -z "$servicenetwork" ]; then
    echo "create_install_config_secret called without servicenetwork"
    exit 1
  fi

  local base_domain="$(oc get -n open-cluster-management secret/${AWS_SECRET_NAME} -o jsonpath='{.data.baseDomain}' | base64 -d)"
  ensure_set base_domain

  local ssh_publickey="$(oc get -n open-cluster-management secret/${AWS_SECRET_NAME} -o jsonpath='{.data.ssh-publickey}' | base64 -d)"
  ensure_set ssh_publickey

  rm -rf $TMPDIR
  mkdir -p $TMPDIR

  cat <<EOF > ${TMPDIR}/install-config.yaml
apiVersion: v1
metadata:
  name: "$clustername"
baseDomain: $base_domain
controlPlane:
  architecture: amd64
  hyperthreading: Enabled
  name: master
  replicas: 3
  platform:
    aws:
      rootVolume:
        iops: 4000
        size: 100
        type: io1
      type: $CONTROL_PLANE_TYPE
compute:
- hyperthreading: Enabled
  architecture: amd64
  name: 'worker'
  replicas: $COMPUTE_COUNT
  platform:
    aws:
      rootVolume:
        iops: 2000
        size: 100
        type: io1
      type: $COMPUTE_TYPE
networking:
  networkType: OVNKubernetes
  clusterNetwork:
  - cidr: $clusternetwork
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  serviceNetwork:
  - $servicenetwork
platform:
  aws:
    region: $region
pullSecret: "" # skip, hive will inject based on it's secrets
sshKey: |-
    $ssh_publickey
EOF

  oc create secret generic ${clustername}-install-config \
    -n $clustername \
    --from-file=${TMPDIR}/install-config.yaml

  rm -rf $TMPDIR
}

ensure_set AWS_SECRET_NAME
ensure_set CLUSTERSET_NAME
ensure_set CLUSTER_NAMES
ensure_set CLUSTER_REGIONS
ensure_set CLUSTER_NETWORKS
ensure_set SERVICE_NETWORKS
ensure_set CLUSTERIMAGESET

oc get clusterimageset $CLUSTERIMAGESET 2>/dev/null >/dev/null
if [ $? -ne 0 ]; then
  echo "ClusterImageSet $CLUSTERIMAGESET does not exist"
  exit 1
fi

base_domain="$(oc get -n open-cluster-management secret/${AWS_SECRET_NAME} -o jsonpath='{.data.baseDomain}' | base64 -d)"
ensure_set base_domain

ssh_privatekey="$(oc get -n open-cluster-management secret/${AWS_SECRET_NAME} -o jsonpath='{.data.ssh-privatekey}')"
ensure_set ssh_privatekey

pull_secret="$(oc get -n open-cluster-management secret/${AWS_SECRET_NAME} -o jsonpath='{.data.pullSecret}')"
ensure_set pull_secret

for i in $cluster_index; do
  clustername=${CLUSTER_NAMES[$i]}
  region=${CLUSTER_REGIONS[$i]}
  clusternetwork=${CLUSTER_NETWORKS[$i]}
  servicenetwork=${SERVICE_NETWORKS[$i]}
  echo "cluster name = $clustername"
  echo "cluster region = $region"
  echo "cluster network = $clusternetwork"
  echo "service network = $servicenetwork"

  oc create ns ${CLUSTER_NAMES[$i]}

  create_install_config_secret $clustername $region $clusternetwork $servicenetwork
  create_aws_creds_secret $clustername

  cat <<EOF | oc apply -f -
apiVersion: hive.openshift.io/v1
kind: ClusterDeployment
metadata:
  name: $clustername
  namespace: $clustername
  labels:
    cloud: 'AWS'
    region: $region
    vendor: OpenShift
    cluster.open-cluster-management.io/clusterset: $CLUSTERSET_NAME
spec:
  baseDomain: $base_domain
  clusterName: $clustername
  controlPlaneConfig:
    servingCertificates: {}
  installAttemptsLimit: 1
  installed: false
  platform:
    aws:
      credentialsSecretRef:
        name: ${clustername}-${AWS_SECRET_NAME}-creds
      region: $region
  provisioning:
    installConfigSecretRef:
      name: ${clustername}-install-config
    sshPrivateKeySecretRef:
      name: ${clustername}-ssh-private-key
    imageSetRef:
      name: $CLUSTERIMAGESET
  pullSecretRef:
    name: ${clustername}-pull-secret
---
apiVersion: cluster.open-cluster-management.io/v1
kind: ManagedCluster
metadata:
  labels:
    cloud: Amazon
    region: $region
    name: $clustername
    vendor: OpenShift
    cluster.open-cluster-management.io/clusterset: $CLUSTERSET_NAME
  name: $clustername
spec:
  hubAcceptsClient: true
---
apiVersion: hive.openshift.io/v1
kind: MachinePool
metadata:
  name: ${clustername}-worker
  namespace: $clustername
spec:
  clusterDeploymentRef:
    name: $clustername
  name: worker
  platform:
    aws:
      rootVolume:
        iops: 2000
        size: 100
        type: io1
      type: $COMPUTE_TYPE
  replicas: $COMPUTE_COUNT
---
apiVersion: v1
kind: Secret
metadata:
  name: ${clustername}-pull-secret
  namespace: $clustername
data:
  .dockerconfigjson: "$pull_secret"
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: Secret
metadata:
  name: ${clustername}-ssh-private-key
  namespace: $clustername
data:
  ssh-privatekey: "$ssh_privatekey"
type: Opaque
---
apiVersion: agent.open-cluster-management.io/v1
kind: KlusterletAddonConfig
metadata:
  name: $clustername
  namespace: $clustername
spec:
  clusterName: $clustername
  clusterNamespace: $clustername
  clusterLabels:
    cloud: Amazon
    vendor: OpenShift
  applicationManager:
    enabled: true
  policyController:
    enabled: true
  searchCollector:
    enabled: true
  certPolicyController:
    enabled: true
  iamPolicyController:
    enabled: true
EOF
done
