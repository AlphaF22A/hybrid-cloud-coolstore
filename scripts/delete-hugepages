#!/bin/bash

TMP_KUBECONFIG=/tmp/kubeconfig

CLUSTERS="coolstore-a coolstore-b coolstore-c"
CONFIG=""

cd `dirname $0`
BASE=`pwd`
cd - >> /dev/null

for cluster in $CLUSTERS; do
  secret="$(oc get -n openshift-gitops secret/${cluster}-cluster-secret -o jsonpath='{.data}')"
  token="$(echo -n $secret | jq -r '.config' | base64 -d | jq -r '.bearerToken')"
  apiserver="$(echo -n $secret | jq -r '.server' | base64 -d)"

  if [ -z "$token" ]; then
    echo "could not extract token for $cluster"
    exit 1
  fi

  if [ -z "$apiserver" ]; then
    echo "could not extract API server for $cluster"
    exit 1
  fi

  CONFIG="$CONFIG $cluster $token $apiserver"
done

function login {
  local token="$1"
  local api="$2"

  export KUBECONFIG=$TMP_KUBECONFIG
  rm -f $KUBECONFIG
  touch $KUBECONFIG

  echo "logging in to $api"
  oc login $api --token=$token --insecure-skip-tls-verify
}

function login_and_unlabel_nodes {
  local clustername
  local token
  local apiserver

  while [ $# -gt 0 ]; do
    clustername="$1"
    token="$2"
    apiserver="$3"
    shift
    shift
    shift
    echo "$clustername $apiserver"
    login $token $apiserver

    for w in `oc get node -oname -l node-role.kubernetes.io/worker=`; do
      # Exclude any submariner gateway nodes
      oc get $w --show-labels | grep -q submariner.io/gateway=true && continue

      oc label $w node-role.kubernetes.io/worker-hp-
    done
  done
}

function login_and_wait_for_mcp {
  local clustername
  local token
  local apiserver

  while [ $# -gt 0 ]; do
    clustername="$1"
    token="$2"
    apiserver="$3"
    shift
    shift
    shift
    echo "$clustername $apiserver"
    login $token $apiserver

    echo -n "waiting for worker-hp MCP on $clustername to be ready..."
	while ! oc get mcp worker-hp -o jsonpath="{.status.conditions[?(@.type=='Updating')].status}" | grep False > /dev/null; do
	  echo -n "."
	  sleep 30
	done
	echo "done"

  done
}

login_and_unlabel_nodes $CONFIG
login_and_wait_for_mcp $CONFIG

rm -f $KUBECONFIG
