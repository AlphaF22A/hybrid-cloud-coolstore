#!/bin/bash

SSH_DIR=$HOME/.hybridcloud
SSH_KEYFILE=cluster

cd `dirname $0`
BASE=`pwd`
cd - >> /dev/null

source ${BASE}/../config.sh

if [ -z "$AWS_SECRET_NAME" ]; then
  echo "AWS_SECRET_NAME not set in config.sh"
  exit 1
fi

PULL_SECRET=${BASE}/../pull-secret.txt

if [ ! -f $PULL_SECRET ]; then
  echo "pull secret $PULL_SECRET does not exist - please download it from https://console.redhat.com/openshift/install/pull-secret"
  exit 1
fi

#################
# Added for F5 XC

F5XC_P12_CERT=${BASE}/../f5xc.p12
F5XC_P12_CERT_PW=${BASE}/../f5xc.password

if [ ! -f $F5XC_P12_CERT ]; then
  echo "F5 API cert file (p12) $F5XC_P12_CERT does not exist - please download it from https://f5-asean.console.ves.volterra.io/web/workspaces/administration/personal-management/api_credentials"
  exit 1
fi

if [ ! -f $F5XC_P12_CERT_PW ]; then
  echo "F5 API cert password file $F5XC_P12_CERT_PW does not exist - please add your API Cert password to it."
  exit 1
fi
chmod 600 $F5XC_P12_CERT $F5XC_P12_CERT_PW
#################


echo "Paste the contents of the RHDP email, followed by ENTER & then ctrl-D (on a new line)"
echo "if you don't have the email, login to demo.redhat.com, select Services / OCP4 ACM Hub / Details, and copy the contents of the 'Provision Messages'"

while read -r line; do
  if [[ $line =~ "https://api" ]]; then
    api="$(echo -n $line | sed -e 's|.*\(https://api[^ ]*\).*|\1|')"
  elif [[ $line =~ "User admin with password " ]]; then
    password="$(echo -n $line | sed -e 's/.*User admin with password \([^ ]*\).*/\1/')"
  elif [[ $line =~ "AWS_ACCESS_KEY_ID: " ]]; then
    aws_access_key_id="$(echo -n $line | sed -e 's/.*AWS_ACCESS_KEY_ID: *\([^ ]*\).*/\1/')"
  elif [[ $line =~ "AWS_SECRET_ACCESS_KEY: " ]]; then
    aws_secret_access_key="$(echo -n $line | sed -e 's/.*AWS_SECRET_ACCESS_KEY: *\([^ ]*\).*/\1/')"
  elif [[ $line =~ "Top level domain: " ]]; then
    base_domain="$(echo -n $line | sed -e 's/.*Top level domain: *\.\([^ ]*\).*/\1/')"
  elif [[ $line =~ "ssh lab-user@bastion" ]]; then
    ssh_bastion="$(echo -n $line | sed -e 's|.*ssh .*@\(bastion.*opentlc.com\).*|\1|')"
    ssh_user="$(echo -n $line | sed -e 's|.*ssh \(.*\)@bastion.*opentlc.com.*|\1|')"
  elif [[ $line =~ "Make sure you use the username" ]]; then
    #ssh_pw=`echo $line | sed "s/.*Make sure you use the username '.*'.*'\(.*\)'.*when prompted.*/\1/"`
    #ssh_user=`echo $line | sed "s/.*Make sure you use the username '\(.*\)'.*'.*'.*when prompted.*/\1/"`
    ssh_pw=`echo $line | sed "s/.*Make sure you use the username .*'\(.*\)'.*when prompted.*/\1/"`
  fi
done

if [ -z "$api" ]; then
  echo "could not extract api server URL"
  exit 1
fi
if [ -z "$password" ]; then
  echo "could not extract admin password"
  exit 1
fi
if [ -z "$aws_access_key_id" ]; then
  echo "could not extract AWS Access Key ID"
  exit 1
fi
if [ -z "$aws_secret_access_key" ]; then
  echo "could not extract AWS Secret Access Key"
  exit 1
fi
if [ -z "$base_domain" ]; then
  echo "could not extract top level domain"
  exit 1
fi
if [ -z "$ssh_bastion" ]; then
  echo "could not extract the hostname for the bastion"
  exit 1
fi
if [ -z "$ssh_user" ]; then
  echo "could not extract the ssh user for the bastion"
  exit 1
fi
if [ -z "$ssh_pw" ]; then
  echo "could not extract the ssh password for the bastion"
  exit 1
fi

echo "API Server = $api"
echo "admin Password = $password"
echo "AWS Access Key ID = $aws_access_key_id"
echo "AWS Secret Access Key = $aws_secret_access_key"
echo "Base Domain = $base_domain"
echo "Bastion hostname = $ssh_bastion"
echo "SSH user = $ssh_user"
echo "SSH password = $ssh_pw"

set -e


echo "logging into ACM Hub..."
oc login --insecure-skip-tls-verify -u admin -p $password $api

oc get project open-cluster-management 2>/dev/null >/dev/null
if [ $? -ne 0 ]; then
  echo "open-cluster-management namespace does not exist - this cluster does not look like it has ACM installed"
  exit 1
fi

oc delete -n open-cluster-management secret $AWS_SECRET_NAME || echo "secret/$AWS_SECRET_NAME does not exist"

rm -rf $SSH_DIR
mkdir -p $SSH_DIR
chmod 700 $SSH_DIR
echo "generating ssh key pair for ACM..."
ssh-keygen -f ${SSH_DIR}/${SSH_KEYFILE} -N ""

echo "creating AWS credentials secret..."

oc create secret generic $AWS_SECRET_NAME \
  -n open-cluster-management \
  --from-literal=additionalTrustBundle="" \
  --from-literal=aws_access_key_id="$aws_access_key_id" \
  --from-literal=aws_secret_access_key="$aws_secret_access_key" \
  --from-literal=baseDomain="$base_domain" \
  --from-literal=httpProxy="" \
  --from-literal=httpsProxy="" \
  --from-literal=noProxy="" \
  --from-file=pullSecret="$PULL_SECRET" \
  --from-file=ssh-privatekey="${SSH_DIR}/${SSH_KEYFILE}" \
  --from-file=ssh-publickey="${SSH_DIR}/${SSH_KEYFILE}.pub"

####################################
# Added to configure the bastion

# -F configfile

cat > $SSH_DIR/config <<END
StrictHostKeyChecking no
UserKnownHostsFile=/dev/null
ConnectTimeout=15
END

echo
echo "##################################################################################"
echo ">>> Enter (or copy and paste) the bastion password '$ssh_pw' when prompted:"
ssh-copy-id -F $SSH_DIR/config -i ${SSH_DIR}/${SSH_KEYFILE} $ssh_user@$ssh_bastion >/dev/null 2>&1
echo
echo "Testing ssh:"
echo "\
ssh -F $SSH_DIR/config -i ${SSH_DIR}/${SSH_KEYFILE} $ssh_user@$ssh_bastion whoami"
ssh -F $SSH_DIR/config -i ${SSH_DIR}/${SSH_KEYFILE} $ssh_user@$ssh_bastion whoami
[ $? -ne 0 ] && echo "Error: ssh to bastion not working, please check and try again" && exit 1

# Best way to copy all files to bastion ...
( cd $BASE/..; tar czf - * | ssh -F $SSH_DIR/config -i ${SSH_DIR}/${SSH_KEYFILE} $ssh_user@$ssh_bastion tar xzf - )

# Capture the env vars for later use
> bastion-env.sh
chmod 600 bastion-env.sh
echo SSH_DIR=$SSH_DIR         >> bastion-env.sh 
echo SSH_KEYFILE=$SSH_KEYFILE >> bastion-env.sh 
echo ssh_user=$ssh_user       >> bastion-env.sh 
echo ssh_bastion=$ssh_bastion >> bastion-env.sh 

####################################

### rm -rf $SSH_DIR  # Needed for later use

oc label -n open-cluster-management secret $AWS_SECRET_NAME \
  cluster.open-cluster-management.io/credentials="" \
  cluster.open-cluster-management.io/type="aws"

