#!/bin/bash
# Configure ssh for bastion.
# This script is a wrapper for create-aws-credentials and calls create-aws-credentials, passing the hub details from a file

SSH_DIR=$HOME/.hybridcloud
SSH_KEYFILE=cluster

cd `dirname $0`
BASE=`pwd`
cd - >> /dev/null

source ${BASE}/../config.sh

# Check for F5 XC cert file and password 

F5XC_P12_CERT=${BASE}/../f5xc.p12
F5XC_P12_CERT_PW=${BASE}/../f5xc.password

if [ ! -f $F5XC_P12_CERT ]; then
  echo "F5 API cert file (p12) $F5XC_P12_CERT does not exist - please download it from https://f5-asean.console.ves.volterra.io/web/workspaces/administration/personal-management/api_credentials"
  exit 1
fi

if [ ! -f $F5XC_P12_CERT_PW ]; then
  echo "F5 API cert password file $F5XC_P12_CERT_PW does not exist - please write your API Cert password to it."
  exit 1
fi
chmod 600 $F5XC_P12_CERT $F5XC_P12_CERT_PW


# Basic ssh config ...

mkdir -p $SSH_DIR
chmod 700 $SSH_DIR

cat > $SSH_DIR/config <<END
StrictHostKeyChecking no
UserKnownHostsFile=/dev/null
ConnectTimeout=10
Host *
    PasswordAuthentication no
END

# Check if key based auth works with ssh to the bastion ...

if [ -s ${BASE}/../bastion-env.sh ]; then
	. ${BASE}/../bastion-env.sh
	if [ -s ${SSH_DIR}/${SSH_KEYFILE} -a "$ssh_user" -a "$ssh_bastion" ]; then
		ssh -F $SSH_DIR/config -i ${SSH_DIR}/${SSH_KEYFILE} $ssh_user@$ssh_bastion whoami #  >/dev/null 2>&1 
		if [ $? -eq 0 ]; then
			# ssh working 
			# This script is a wrapper for create-aws-credentials
			cat /tmp/.hub-cluster-details | scripts/create-aws-credentials 
			exit 0
		else
			echo ssh needs to be configured. 
		fi
	fi
fi


# Configure ssh etc 

echo "Paste the contents of the RHDP email, followed by ENTER & then ctrl-D (on a new line)"
echo "if you don't have the email, login to demo.redhat.com, select Services / OCP4 ACM Hub / Details, and copy the contents of the 'Provision Messages'"

cat > /tmp/.hub-cluster-details
chmod 600 /tmp/.hub-cluster-details

while read -r line; do
  if [[ $line =~ "ssh lab-user@bastion" ]]; then
    ssh_bastion="$(echo -n $line | sed -e 's|.*ssh .*@\(bastion.*opentlc.com\).*|\1|')"
    ssh_user="$(echo -n $line | sed -e 's|.*ssh \(.*\)@bastion.*opentlc.com.*|\1|')"
  elif [[ $line =~ "Make sure you use the username" ]]; then
    ssh_pw=`echo $line | sed "s/.*Make sure you use the username .*'\(.*\)'.*when prompted.*/\1/"`
  fi
done < /tmp/.hub-cluster-details

if [ -z "$ssh_bastion" ]; then
  echo "could not extract the hostname for the bastion"
  exit 1
fi
if [ -z "$ssh_user" ]; then
  echo "could not extract the ssh user for the bastion"
  exit 1
fi
if [ -z "$ssh_pw" ]; then
  echo "could not extract the ssh password for the bastion"
  exit 1
fi

echo "Bastion hostname = $ssh_bastion"
echo "SSH user = $ssh_user"
echo "SSH password = $ssh_pw"

set -e


#rm -rf $SSH_DIR
#mkdir -p $SSH_DIR
#chmod 700 $SSH_DIR
echo "generating ssh key pair for ACM..."
rm -f ${SSH_DIR}/${SSH_KEYFILE}*
ssh-keygen -f ${SSH_DIR}/${SSH_KEYFILE} -N ""


# Allow password auth
cat > $SSH_DIR/config <<END
StrictHostKeyChecking no
UserKnownHostsFile=/dev/null
ConnectTimeout=10
END

####################################
# Added to configure the bastion

echo
echo "##############################################################################################"
echo ">>> Wait for the prompt and enter (or copy and paste) the bastion password '$ssh_pw':"
ssh-copy-id -F $SSH_DIR/config -i ${SSH_DIR}/${SSH_KEYFILE} $ssh_user@$ssh_bastion  2>/dev/null >&1
echo
echo "Testing ssh:"
echo "\
ssh -F $SSH_DIR/config -i ${SSH_DIR}/${SSH_KEYFILE} $ssh_user@$ssh_bastion whoami"
ssh -F $SSH_DIR/config -i ${SSH_DIR}/${SSH_KEYFILE} $ssh_user@$ssh_bastion whoami && echo OK, can log into bastion
[ $? -ne 0 ] && echo "Error: ssh to bastion not working, please check and try again" && exit 1

# Capture the env vars for later use in 'make f5'
> ${BASE}/../bastion-env.sh
chmod 600 ${BASE}/../bastion-env.sh
echo SSH_DIR=$SSH_DIR         >> ${BASE}/../bastion-env.sh 
echo SSH_KEYFILE=$SSH_KEYFILE >> ${BASE}/../bastion-env.sh 
echo ssh_user=$ssh_user       >> ${BASE}/../bastion-env.sh 
echo ssh_bastion=$ssh_bastion >> ${BASE}/../bastion-env.sh 

# Now that key auth is working, disallow password auth
cat > $SSH_DIR/config <<END
StrictHostKeyChecking no
UserKnownHostsFile=/dev/null
ConnectTimeout=10
Host *
    PasswordAuthentication no
END

####################################

# This script is a wrapper for create-aws-credentials
cat /tmp/.hub-cluster-details | scripts/create-aws-credentials 
exit 0

